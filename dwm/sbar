#!/bin/sh

# INIT
# printf "$$" > ~/.cache/pidofbar
printf "$$" > ~/tmp/sbar_dwm
sec=0



getcolor() {
    color=$($HOME/bin/getcolor $1)
    echo "^c""$color""^"
}

# MODULES
update_cpu () { 
	cpu="$(grep -o "^[^ ]*" /proc/loadavg )" 
}

update_memory () { 
	memory="$(getcolor green)""$( $HOME/bin/bar-functions -m )"
}

update_date () { 
	fecha="$(getcolor yellow)""$( $HOME/bin/bar-functions -d )"
}

update_time () { 
	time="$(getcolor cyan)""$( $HOME/bin/bar-functions -t )"
}

update_weather () { 
    weather="$(getcolor brightblue)""$(curl -s "wttr.in?format=1"| sed -E "s/^(.).*\+/\1/")" 
}

update_bat () { 
	# you might need to change the path depending on your device
	read -r bat_status </sys/class/power_supply/BAT1/status
	read -r bat_capacity </sys/class/power_supply/BAT1/capacity
	bat="$bat_status $bat_capacity%"
}

update_vol () { 
	vol="$(getcolor magenta)""$( $HOME/bin/bar-functions -a )"
}

update_backlight () { 
	# you might need to change the path depending on your device
	read -r actual_brightness </sys/class/backlight/intel_backlight/actual_brightness
	read -r max_brightness </sys/class/backlight/intel_backlight/max_brightness
	backlight="â˜€$((actual_brightness*100/max_brightness))%"
}

# For calcurse users, refer https://github.com/pystardust/automeet
#update_event () { 
#	event="$(calcurse -n | sed 1d | \
#		sed -E "s_^ *\[(.*):(.*)\] ([^\t]*)\t?.*_[\1h \2m->\3]_")" 
#	[ "[]" = "$event" ] && event=""
#}


# modules that don't update on their own need to be run at the start for getting their initial value
update_vol
update_date
#update_backlight

display () { 
	#printf "%s\n" " $weather $memory $vol $fecha $time "
	xsetroot -name " $weather   $memory   $vol   $fecha   $time "
	#xsetroot -name " [$weather] [$memory $cpu] [$bat] [$backlight] [$vol] $time "
}

# SIGNALLING
# trap	"<function>;display"		"RTMIN+n"
trap	"update_vol;display"		"RTMIN"
# trap	"update_backlight;display" 	"RTMIN+1"
# trap	"update_bat;display" 		"RTMIN+2"
#
# to update it from external commands
## kill -m "$(cat ~/.cache/pidofbar)"
# where m = 34 + n

while true
do
	sleep 1 & wait && { 
		# to update item ever n seconds with a offset of m
		## [ $((sec % n)) -eq m ] && udpate_item
		[ $((sec % 15 )) -eq 0 ] && update_time 	# update time every 15 seconds
		##[ $((sec % 15)) -eq 0 ] && update_cpu 	# update cpu every 15 seconds
		[ $((sec % 30)) -eq 0 ] && update_memory
		##[ $((sec % 60)) -eq 0 ] && update_bat
		[ $((sec % 3600)) -eq 2 ] && update_weather 
		#[ $((sec % 300)) -eq 1 ] && update_event

		# how often the display updates ( 5 seconds )
		[ $((sec % 5 )) -eq 0 ] && display
		sec=$((sec + 1))
	}
done 


