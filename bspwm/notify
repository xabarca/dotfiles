#!/usr/bin/bash
# Outputs the BSPWM configuration to be used as a dunst notifycation

background="#2D2D2D"

Format() {
	#echo "%{+u}%{B$background} $1 %{B}%{-u}"
	echo "$1"
}

Workspaces_old() {
	desktops=$(bspc query -D --names)
    focused=$(bspc query -D --names -d focused)

	for desktop in $desktops; do
		desktop=$(echo "$desktop")
		nodes=$(bspc query -N -d $desktop)

		if [ ! -z "$nodes" ]; then
			desktops=$(echo $desktops | sed "s/$desktop/ [ $desktop ] /")
			
    fi

  done
  # desktops=$(echo $desktops | sed "s/$focused/$focused/")

  #echo $desktops | sed "s/_/ /g"
  echo $desktops
}

Workspaces() {
	desktops=$(bspc query -D --names)
    focused=$(bspc query -D --names -d focused)
	final=""

	for desktop in $desktops; do
		nodes=$(bspc query -N -d $desktop)
		if [ "$focused" = "$desktop" ]; then
			final="$final ÔÄÖ "
			#final="$final Ôßé"
		elif [ -z "$nodes" ]; then
			final="$final Ôáõ"
		else
			#final="$final  ÔÑë"
			#final="$final  Ôôô"
			final="$final ÔÜí"
		fi
  done
  echo $final
}

Workspaces2() {
  while true; do
    total="$(xdotool get_num_desktops)"
    current="$(xdotool get_desktop)"
    desktops=""

    for i in $(seq 0 $total) 
    do
        if [ "$i" = "$current" ]; then
            desktops="$desktops ‚ñ†"
        else
            desktops="$desktops ‚ñ°"
        fi
    done

    echo 'W' $desktops
    sleep 0.1
  done
}

CpuTemp() {
	temp=$(sensors | grep "Tdie" | sed "s/Tdie: *+//;s/¬∞C *//")
	if [ 1 -eq "$(echo "$temp > 80" | bc)" ]; then
			printf "%%{F#ed0b0b}"
	elif [ 1 -eq "$(echo "$temp > 60" | bc)" ]; then
			printf "%%{F#f2e421}";
	fi
	Format ""$temp"¬∞C%{F-}"
}

Cpu() {
	usage=$(mpstat | sed '1,3d;s/.* //')
	output="$(calc 100 - $usage)"
	Format "$output"
}

Clock(){
	TIME=$(date "+%I:%M")
	Format "Ôê∫ $TIME"
}

Calendar(){
	DATE=$(date "+%d/%m/%y")
	Format "ÔÑ≥ ${DATE}"
}

ActiveWindow(){
	printf "$(xdotool getwindowfocus getwindowname)"
}

Packages() {
	Format "$(sudo pacman -Qu | wc -l)"
}

Subs() {
	#Format "$(polysubs)"
	Format "7.42k 116"
}


Memory() {
	echo "%{A:$TERMINAL -e htop:}$(Format "$(i3memory)")%{A}"
}

getMem () {
	usedmem=$(free -m | grep Mem | awk '{print $3}')
	totalmem=$(free -m | grep Mem | awk '{print $2}')
	freemem=$(($totalmem-$usedmem))
	usedpercent=$((100-($freemem*100)/$totalmem))

	Format "Ôî∏ $usedpercent%"
}

Sound(){
	echo "ÔÄ® $($HOME/bin/audioscript getvalue)"
}

Sound_old(){
	device=$(pulsedevices | grep "pci-0000_0b" -A 2)
	mute=$(echo "$device" | grep "Mute" | awk '{ print $2 }')
	vol=$(echo "$device" | grep "front-left" | awk '{ print $5 }')
	output=""

	if [ "$mute" = "yes" ]; then
	  output="üîá mute"
	elif [ "$(echo "$vol" | tr -d "%")" -gt 70 ]; then
	  output="üîä $vol"
	elif [ "$(echo "$vol" | tr -d "%")" -gt 35 ]; then
	  output="Ô©ø $vol"
	else
	  output="üîà $vol"
	fi

	Format "$output"
}

VpnActive() {
    command=$(ip link show | grep tunsnx | wc -l)
    if [[ "$command" == "1" ]]
    then
        #echo "[VPN]"
        Format "[$(tail -n 1 /tmp/svn_log)]"
    else¬∫
        echo ""
    fi
}

Weather() {
	Format $(cat ~/.cache/weather)
}

NewModule() {
	echo "%{B#aef4e3}%{+u}Hello World%{-u}%{B}"
}

Update() {
	#echo -e "%{l}$(Workspaces) $(ActiveWindow) %{r} $(Packages) $(Subs) $(Cpu) $(CpuTemp) $(Memory) $(Sound) $(Weather) $(Clock)"
	echo -e "%{l}$(Workspaces) $(ActiveWindow) %{r} $(VpnActive) $(getMem) $(Clock)"
	#echo -e "%{r} $(NewModule)"
}

herbe  "$(Workspaces)" "$(Sound)" "$(ActiveWindow)" "$(Clock)  $(Calendar)"
#notify-send -u normal "BSPWM params" "$(Workspaces) \n$(Clock) \n$(ActiveWindow) \n$(Sound)"
